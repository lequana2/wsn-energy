//
// Generated file, do not edit! Created by opp_msgc 4.5 from package/frame/frame.msg.
//

#ifndef _WSN_ENERGY_FRAME_M_H_
#define _WSN_ENERGY_FRAME_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <ipAddress.h>
#include <macAddress.h>
// }}


namespace wsn_energy {

/**
 * Enum generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * enum FRAME_TYPE{
 *     FRAME_BEACON  	= 0; 
 *     FRAME_COMMAND 	= 1; 
 * 	FRAME_DATA 		= 2; 
 * 	FRAME_ACK  		= 3; 
 * }
 * </pre>
 */
enum FRAME_TYPE {
    FRAME_BEACON = 0,
    FRAME_COMMAND = 1,
    FRAME_DATA = 2,
    FRAME_ACK = 3
};

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet Frame{
 *     int numberTransmission = 0; 
 *     int headerLength; 			
 *     
 *     
 * 	
 * 	
 * 	int 	frameType;        		    
 *   	int 	securityEnabled;  		    
 *   	int 	framePending;     			
 *   	bool 	ackRequired;      			
 *   	bool 	panIdCompression; 			
 * 	int 	reserved; 		     	    
 *   	int 	destinationAddressMode;     
 *   	int 	frameVersion;     		    
 *   	int 	sourceAddressMode;          
 *   	
 *   	
 *   	uint16_t frameCheckSequence;
 * }
 * </pre>
 */
class Frame : public ::cPacket
{
  protected:
    int numberTransmission_var;
    int headerLength_var;
    int frameType_var;
    int securityEnabled_var;
    int framePending_var;
    bool ackRequired_var;
    bool panIdCompression_var;
    int reserved_var;
    int destinationAddressMode_var;
    int frameVersion_var;
    int sourceAddressMode_var;
    uint16_t frameCheckSequence_var;

  private:
    void copy(const Frame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Frame&);

  public:
    Frame(const char *name=NULL, int kind=0);
    Frame(const Frame& other);
    virtual ~Frame();
    Frame& operator=(const Frame& other);
    virtual Frame *dup() const {return new Frame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getNumberTransmission() const;
    virtual void setNumberTransmission(int numberTransmission);
    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual int getSecurityEnabled() const;
    virtual void setSecurityEnabled(int securityEnabled);
    virtual int getFramePending() const;
    virtual void setFramePending(int framePending);
    virtual bool getAckRequired() const;
    virtual void setAckRequired(bool ackRequired);
    virtual bool getPanIdCompression() const;
    virtual void setPanIdCompression(bool panIdCompression);
    virtual int getReserved() const;
    virtual void setReserved(int reserved);
    virtual int getDestinationAddressMode() const;
    virtual void setDestinationAddressMode(int destinationAddressMode);
    virtual int getFrameVersion() const;
    virtual void setFrameVersion(int frameVersion);
    virtual int getSourceAddressMode() const;
    virtual void setSourceAddressMode(int sourceAddressMode);
    virtual uint16_t getFrameCheckSequence() const;
    virtual void setFrameCheckSequence(uint16_t frameCheckSequence);
};

inline void doPacking(cCommBuffer *b, Frame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Frame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet FrameDataStandard extends Frame{
 * 
 *    	headerLength = 25; 
 *     
 *   	int dataSequenceNumber;	
 *   	
 * 	uint16_t sourcePanID;	  				
 * 	uint16_t destinationPanID; 				
 * 	MacAddress sourceMacAddressEUI64; 		
 * 	MacAddress destinationMacAddressEUI64;  
 * 	
 * 	int sourceMacAddress; 		
 * 	int destinationMacAddress;  
 * }
 * </pre>
 */
class FrameDataStandard : public ::wsn_energy::Frame
{
  protected:
    int dataSequenceNumber_var;
    uint16_t sourcePanID_var;
    uint16_t destinationPanID_var;
    MacAddress sourceMacAddressEUI64_var;
    MacAddress destinationMacAddressEUI64_var;
    int sourceMacAddress_var;
    int destinationMacAddress_var;

  private:
    void copy(const FrameDataStandard& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FrameDataStandard&);

  public:
    FrameDataStandard(const char *name=NULL, int kind=0);
    FrameDataStandard(const FrameDataStandard& other);
    virtual ~FrameDataStandard();
    FrameDataStandard& operator=(const FrameDataStandard& other);
    virtual FrameDataStandard *dup() const {return new FrameDataStandard(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDataSequenceNumber() const;
    virtual void setDataSequenceNumber(int dataSequenceNumber);
    virtual uint16_t getSourcePanID() const;
    virtual void setSourcePanID(uint16_t sourcePanID);
    virtual uint16_t getDestinationPanID() const;
    virtual void setDestinationPanID(uint16_t destinationPanID);
    virtual MacAddress& getSourceMacAddressEUI64();
    virtual const MacAddress& getSourceMacAddressEUI64() const {return const_cast<FrameDataStandard*>(this)->getSourceMacAddressEUI64();}
    virtual void setSourceMacAddressEUI64(const MacAddress& sourceMacAddressEUI64);
    virtual MacAddress& getDestinationMacAddressEUI64();
    virtual const MacAddress& getDestinationMacAddressEUI64() const {return const_cast<FrameDataStandard*>(this)->getDestinationMacAddressEUI64();}
    virtual void setDestinationMacAddressEUI64(const MacAddress& destinationMacAddressEUI64);
    virtual int getSourceMacAddress() const;
    virtual void setSourceMacAddress(int sourceMacAddress);
    virtual int getDestinationMacAddress() const;
    virtual void setDestinationMacAddress(int destinationMacAddress);
};

inline void doPacking(cCommBuffer *b, FrameDataStandard& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FrameDataStandard& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet FrameDataCompressed extends Frame{
 * 
 * 	 int headerLength = 32;
 * 	
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 	
 * 	int  codeBit;						
 * 	bool isOrignatorCompressed;			
 * 	bool isFinalDestinationCompressed;	
 * 	int hopLeft;						
 * 
 * 	int hcDispatch;						
 * 	
 * 	int broadcastHeader;				
 * 	int fragmentationHeader;			
 * 	
 * 	MacAddress orginatorAddressEUI64; 				
 * 	MacAddress finalDestinationMacAddressEUI64;  	
 * 	
 * 	
 * 	int dataSequenceNumber;		
 *   	
 * 	int sourcePanID;	  					
 * 	int destinationPanID; 					
 * 	MacAddress sourceMacAddressEUI64; 		
 * 	MacAddress destinationMacAddressEUI64;  
 * 	
 * 	int orginatorMacAddress; 			
 * 	int finalDestinationMacAddress;		
 * 	int sourceMacAddress; 		
 * 	int destinationMacAddress;  
 * }
 * </pre>
 */
class FrameDataCompressed : public ::wsn_energy::Frame
{
  protected:
    int headerLength_var;
    int codeBit_var;
    bool isOrignatorCompressed_var;
    bool isFinalDestinationCompressed_var;
    int hopLeft_var;
    int hcDispatch_var;
    int broadcastHeader_var;
    int fragmentationHeader_var;
    MacAddress orginatorAddressEUI64_var;
    MacAddress finalDestinationMacAddressEUI64_var;
    int dataSequenceNumber_var;
    int sourcePanID_var;
    int destinationPanID_var;
    MacAddress sourceMacAddressEUI64_var;
    MacAddress destinationMacAddressEUI64_var;
    int orginatorMacAddress_var;
    int finalDestinationMacAddress_var;
    int sourceMacAddress_var;
    int destinationMacAddress_var;

  private:
    void copy(const FrameDataCompressed& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FrameDataCompressed&);

  public:
    FrameDataCompressed(const char *name=NULL, int kind=0);
    FrameDataCompressed(const FrameDataCompressed& other);
    virtual ~FrameDataCompressed();
    FrameDataCompressed& operator=(const FrameDataCompressed& other);
    virtual FrameDataCompressed *dup() const {return new FrameDataCompressed(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);
    virtual int getCodeBit() const;
    virtual void setCodeBit(int codeBit);
    virtual bool getIsOrignatorCompressed() const;
    virtual void setIsOrignatorCompressed(bool isOrignatorCompressed);
    virtual bool getIsFinalDestinationCompressed() const;
    virtual void setIsFinalDestinationCompressed(bool isFinalDestinationCompressed);
    virtual int getHopLeft() const;
    virtual void setHopLeft(int hopLeft);
    virtual int getHcDispatch() const;
    virtual void setHcDispatch(int hcDispatch);
    virtual int getBroadcastHeader() const;
    virtual void setBroadcastHeader(int broadcastHeader);
    virtual int getFragmentationHeader() const;
    virtual void setFragmentationHeader(int fragmentationHeader);
    virtual MacAddress& getOrginatorAddressEUI64();
    virtual const MacAddress& getOrginatorAddressEUI64() const {return const_cast<FrameDataCompressed*>(this)->getOrginatorAddressEUI64();}
    virtual void setOrginatorAddressEUI64(const MacAddress& orginatorAddressEUI64);
    virtual MacAddress& getFinalDestinationMacAddressEUI64();
    virtual const MacAddress& getFinalDestinationMacAddressEUI64() const {return const_cast<FrameDataCompressed*>(this)->getFinalDestinationMacAddressEUI64();}
    virtual void setFinalDestinationMacAddressEUI64(const MacAddress& finalDestinationMacAddressEUI64);
    virtual int getDataSequenceNumber() const;
    virtual void setDataSequenceNumber(int dataSequenceNumber);
    virtual int getSourcePanID() const;
    virtual void setSourcePanID(int sourcePanID);
    virtual int getDestinationPanID() const;
    virtual void setDestinationPanID(int destinationPanID);
    virtual MacAddress& getSourceMacAddressEUI64();
    virtual const MacAddress& getSourceMacAddressEUI64() const {return const_cast<FrameDataCompressed*>(this)->getSourceMacAddressEUI64();}
    virtual void setSourceMacAddressEUI64(const MacAddress& sourceMacAddressEUI64);
    virtual MacAddress& getDestinationMacAddressEUI64();
    virtual const MacAddress& getDestinationMacAddressEUI64() const {return const_cast<FrameDataCompressed*>(this)->getDestinationMacAddressEUI64();}
    virtual void setDestinationMacAddressEUI64(const MacAddress& destinationMacAddressEUI64);
    virtual int getOrginatorMacAddress() const;
    virtual void setOrginatorMacAddress(int orginatorMacAddress);
    virtual int getFinalDestinationMacAddress() const;
    virtual void setFinalDestinationMacAddress(int finalDestinationMacAddress);
    virtual int getSourceMacAddress() const;
    virtual void setSourceMacAddress(int sourceMacAddress);
    virtual int getDestinationMacAddress() const;
    virtual void setDestinationMacAddress(int destinationMacAddress);
};

inline void doPacking(cCommBuffer *b, FrameDataCompressed& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FrameDataCompressed& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet FrameACK extends Frame{
 * 	headerLength = 5; 
 * 
 *    	int dataSequenceNumber;          	
 * }
 * </pre>
 */
class FrameACK : public ::wsn_energy::Frame
{
  protected:
    int dataSequenceNumber_var;

  private:
    void copy(const FrameACK& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FrameACK&);

  public:
    FrameACK(const char *name=NULL, int kind=0);
    FrameACK(const FrameACK& other);
    virtual ~FrameACK();
    FrameACK& operator=(const FrameACK& other);
    virtual FrameACK *dup() const {return new FrameACK(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDataSequenceNumber() const;
    virtual void setDataSequenceNumber(int dataSequenceNumber);
};

inline void doPacking(cCommBuffer *b, FrameACK& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FrameACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet FrameBeacon extends Frame{
 * 	headerLength = 26;
 *     
 * 	int beaconSequenceNumber;	
 * 	
 * 	int sourcePanID;	  		
 * 	int destinationPanID; 		
 * 	int sourceMacAddress; 		
 * 	int destinationMacAddress;  
 *   	
 *   	
 *   	int beaconOrder;			
 *   	int superFrameOrder;		
 *   	int finalCAPslot;			
 *   	int batteryLifeExtension;	
 *   	int reserved;				
 *   	int PANcoordinator;			
 *   	int associationPermit;		
 * 
 * 	
 * 	
 * 	
 * }
 * </pre>
 */
class FrameBeacon : public ::wsn_energy::Frame
{
  protected:
    int beaconSequenceNumber_var;
    int sourcePanID_var;
    int destinationPanID_var;
    int sourceMacAddress_var;
    int destinationMacAddress_var;
    int beaconOrder_var;
    int superFrameOrder_var;
    int finalCAPslot_var;
    int batteryLifeExtension_var;
    int reserved_var;
    int PANcoordinator_var;
    int associationPermit_var;

  private:
    void copy(const FrameBeacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FrameBeacon&);

  public:
    FrameBeacon(const char *name=NULL, int kind=0);
    FrameBeacon(const FrameBeacon& other);
    virtual ~FrameBeacon();
    FrameBeacon& operator=(const FrameBeacon& other);
    virtual FrameBeacon *dup() const {return new FrameBeacon(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getBeaconSequenceNumber() const;
    virtual void setBeaconSequenceNumber(int beaconSequenceNumber);
    virtual int getSourcePanID() const;
    virtual void setSourcePanID(int sourcePanID);
    virtual int getDestinationPanID() const;
    virtual void setDestinationPanID(int destinationPanID);
    virtual int getSourceMacAddress() const;
    virtual void setSourceMacAddress(int sourceMacAddress);
    virtual int getDestinationMacAddress() const;
    virtual void setDestinationMacAddress(int destinationMacAddress);
    virtual int getBeaconOrder() const;
    virtual void setBeaconOrder(int beaconOrder);
    virtual int getSuperFrameOrder() const;
    virtual void setSuperFrameOrder(int superFrameOrder);
    virtual int getFinalCAPslot() const;
    virtual void setFinalCAPslot(int finalCAPslot);
    virtual int getBatteryLifeExtension() const;
    virtual void setBatteryLifeExtension(int batteryLifeExtension);
    virtual int getReserved() const;
    virtual void setReserved(int reserved);
    virtual int getPANcoordinator() const;
    virtual void setPANcoordinator(int PANcoordinator);
    virtual int getAssociationPermit() const;
    virtual void setAssociationPermit(int associationPermit);
};

inline void doPacking(cCommBuffer *b, FrameBeacon& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FrameBeacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/frame/frame.msg</tt> by opp_msgc.
 * <pre>
 * packet FrameCommand extends Frame{
 *     headerLength = 25;
 *     
 * 	int dataSequenceNumber;	
 * 	
 * 	int sourcePanID;	  		
 * 	int destinationPanID; 		
 * 	int sourceMacAddress; 		
 * 	int destinationMacAddress;  
 *   	
 *   	
 *   	int commandType; 
 * 
 * 	
 * 	
 * 	
 * 	
 * 	
 * 	
 * 	
 * 	
 * 	
 * 
 * 	
 * }
 * </pre>
 */
class FrameCommand : public ::wsn_energy::Frame
{
  protected:
    int dataSequenceNumber_var;
    int sourcePanID_var;
    int destinationPanID_var;
    int sourceMacAddress_var;
    int destinationMacAddress_var;
    int commandType_var;

  private:
    void copy(const FrameCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FrameCommand&);

  public:
    FrameCommand(const char *name=NULL, int kind=0);
    FrameCommand(const FrameCommand& other);
    virtual ~FrameCommand();
    FrameCommand& operator=(const FrameCommand& other);
    virtual FrameCommand *dup() const {return new FrameCommand(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDataSequenceNumber() const;
    virtual void setDataSequenceNumber(int dataSequenceNumber);
    virtual int getSourcePanID() const;
    virtual void setSourcePanID(int sourcePanID);
    virtual int getDestinationPanID() const;
    virtual void setDestinationPanID(int destinationPanID);
    virtual int getSourceMacAddress() const;
    virtual void setSourceMacAddress(int sourceMacAddress);
    virtual int getDestinationMacAddress() const;
    virtual void setDestinationMacAddress(int destinationMacAddress);
    virtual int getCommandType() const;
    virtual void setCommandType(int commandType);
};

inline void doPacking(cCommBuffer *b, FrameCommand& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FrameCommand& obj) {obj.parsimUnpack(b);}

}; // end namespace wsn_energy

#endif // _WSN_ENERGY_FRAME_M_H_

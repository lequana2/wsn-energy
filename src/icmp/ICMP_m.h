//
// Generated file, do not edit! Created by opp_msgc 4.4 from icmp/ICMP.msg.
//

#ifndef _ICMP_M_H_
#define _ICMP_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif


namespace wsn_energy {

/**
 * Enum generated from <tt>icmp/ICMP.msg</tt> by opp_msgc.
 * <pre>
 * enum ICMP_CODE{
 * 	ICMP_DIO_CODE = 0;
 * 	ICMP_DIS_CODE = 1;
 * };
 * </pre>
 */
enum ICMP_CODE {
    ICMP_DIO_CODE = 0,
    ICMP_DIS_CODE = 1
};

/**
 * Class generated from <tt>icmp/ICMP.msg</tt> by opp_msgc.
 * <pre>
 * packet ICMP{
 *     int icmp_code;
 *     int sendID;
 *     int recvID;
 * }
 * </pre>
 */
class ICMP : public ::cPacket
{
  protected:
    int icmp_code_var;
    int sendID_var;
    int recvID_var;

  private:
    void copy(const ICMP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ICMP&);

  public:
    ICMP(const char *name=NULL, int kind=0);
    ICMP(const ICMP& other);
    virtual ~ICMP();
    ICMP& operator=(const ICMP& other);
    virtual ICMP *dup() const {return new ICMP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getIcmp_code() const;
    virtual void setIcmp_code(int icmp_code);
    virtual int getSendID() const;
    virtual void setSendID(int sendID);
    virtual int getRecvID() const;
    virtual void setRecvID(int recvID);
};

inline void doPacking(cCommBuffer *b, ICMP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ICMP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>icmp/ICMP.msg</tt> by opp_msgc.
 * <pre>
 * packet DIO extends ICMP{
 * 	int dodagID;
 * 	int rank;
 * 	int version;
 * }
 * </pre>
 */
class DIO : public ::wsn_energy::ICMP
{
  protected:
    int dodagID_var;
    int rank_var;
    int version_var;

  private:
    void copy(const DIO& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DIO&);

  public:
    DIO(const char *name=NULL, int kind=0);
    DIO(const DIO& other);
    virtual ~DIO();
    DIO& operator=(const DIO& other);
    virtual DIO *dup() const {return new DIO(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDodagID() const;
    virtual void setDodagID(int dodagID);
    virtual int getRank() const;
    virtual void setRank(int rank);
    virtual int getVersion() const;
    virtual void setVersion(int version);
};

inline void doPacking(cCommBuffer *b, DIO& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DIO& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>icmp/ICMP.msg</tt> by opp_msgc.
 * <pre>
 * packet DIS extends ICMP{
 * 	int flags;
 * 	int reserved;
 * 	int options; 
 * 	int convergence;
 * }
 * </pre>
 */
class DIS : public ::wsn_energy::ICMP
{
  protected:
    int flags_var;
    int reserved_var;
    int options_var;
    int convergence_var;

  private:
    void copy(const DIS& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DIS&);

  public:
    DIS(const char *name=NULL, int kind=0);
    DIS(const DIS& other);
    virtual ~DIS();
    DIS& operator=(const DIS& other);
    virtual DIS *dup() const {return new DIS(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFlags() const;
    virtual void setFlags(int flags);
    virtual int getReserved() const;
    virtual void setReserved(int reserved);
    virtual int getOptions() const;
    virtual void setOptions(int options);
    virtual int getConvergence() const;
    virtual void setConvergence(int convergence);
};

inline void doPacking(cCommBuffer *b, DIS& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DIS& obj) {obj.parsimUnpack(b);}

}; // end namespace wsn_energy

#endif // _ICMP_M_H_

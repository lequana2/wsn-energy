[General]
network = WSN

#sim-time-limit = 60s	# only run in 1 minute
#sim-time-limit = 300s 	# only run in 5 minutes
sim-time-limit = 3600s  # only run in 1 hour
#sim-time-limit = 7200s # only run in 2 hours

# limit time for scheduler 
WSN.timeLimit		= 3600

# delay for set up
WSN.setupDelay      = 65
#WSN.setupDelay		= 0

# innovative work
WSN.usingFLR	    = false # fast-local repair
WSN.usingELB		= false # energy load-balance
WSN.usingHDC 		= false # using header compression 0 of 6lowpan/6lowmac implementation

# enviroment 
WSN.width 			= 480m 
WSN.height 			= 480m

# number of client
WSN.numberClient	= 196
#WSN.numberClient	= 55
#WSN.numberClient 	=  3
#WSN.numberClient   =  1

# arrangement
# 0: grid, 14 in a row
# 1: pyramid
# 2: line
WSN.topology	= 0
#WSN.topology	= 1
#WSN.topology    = 2

# server location
#WSN.serverX = 460m
#WSN.serverY = 240m	 
WSN.serverX = 240m
WSN.serverY = 0m

# particular purpose
# 0: just construct
# 1: scheme 1, test 3 packet / furthest node
# 2: random periodical data
WSN.scheme	= 2

# random function
# 0 : using rand()
# 1 : using intuniform
WSN.rand	= 1

# energy statistic polling
WSN.isPollingCount  = false		# 1 activate, 0 deactivate
WSN.isPolling		= false 	# 1 activate, 0 deactivate
WSN.polling         = 1 		# check every 1 second 

# mote working range
WSN.ssRange			= 30m

WSN.server.appType   = "Server"
WSN.server.traType   = "UDP"
WSN.server.netType   = "IPv6"
WSN.server.macType   = "csma"
WSN.server.rdcType   = "contikiMAC"
WSN.server.radioType = "nullRadio"

WSN.client[*].appType   = "Client"
WSN.client[*].traType   = "UDP"
WSN.client[*].netType   = "IPv6"
WSN.client[*].macType   = "csma"
WSN.client[*].rdcType   = "contikiMAC"
WSN.client[*].radioType = "cc2420"